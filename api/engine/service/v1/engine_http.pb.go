// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: engine.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEngineAddSymbol = "/api.engine.service.v1.Engine/AddSymbol"
const OperationEngineCancelOrder = "/api.engine.service.v1.Engine/CancelOrder"
const OperationEngineCreateOrder = "/api.engine.service.v1.Engine/CreateOrder"
const OperationEngineGetEngine = "/api.engine.service.v1.Engine/GetEngine"

type EngineHTTPServer interface {
	AddSymbol(context.Context, *AddSymbolReq) (*AddSymbolReply, error)
	CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderReply, error)
	CreateOrder(context.Context, *AddOrderReq) (*AddOrderReply, error)
	GetEngine(context.Context, *CloseSymbolReq) (*CloseSymbolReply, error)
}

func RegisterEngineHTTPServer(s *http.Server, srv EngineHTTPServer) {
	r := s.Route("/")
	r.POST("/order/v1/add", _Engine_CreateOrder0_HTTP_Handler(srv))
	r.POST("/order/v1/cancel", _Engine_CancelOrder0_HTTP_Handler(srv))
	r.POST("/symbol/v1/open", _Engine_AddSymbol0_HTTP_Handler(srv))
	r.POST("/symbol/v1/close", _Engine_GetEngine0_HTTP_Handler(srv))
}

func _Engine_CreateOrder0_HTTP_Handler(srv EngineHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOrderReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEngineCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*AddOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Engine_CancelOrder0_HTTP_Handler(srv EngineHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelOrderReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEngineCancelOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelOrder(ctx, req.(*CancelOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Engine_AddSymbol0_HTTP_Handler(srv EngineHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddSymbolReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEngineAddSymbol)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddSymbol(ctx, req.(*AddSymbolReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddSymbolReply)
		return ctx.Result(200, reply)
	}
}

func _Engine_GetEngine0_HTTP_Handler(srv EngineHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CloseSymbolReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEngineGetEngine)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEngine(ctx, req.(*CloseSymbolReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CloseSymbolReply)
		return ctx.Result(200, reply)
	}
}

type EngineHTTPClient interface {
	AddSymbol(ctx context.Context, req *AddSymbolReq, opts ...http.CallOption) (rsp *AddSymbolReply, err error)
	CancelOrder(ctx context.Context, req *CancelOrderReq, opts ...http.CallOption) (rsp *CancelOrderReply, err error)
	CreateOrder(ctx context.Context, req *AddOrderReq, opts ...http.CallOption) (rsp *AddOrderReply, err error)
	GetEngine(ctx context.Context, req *CloseSymbolReq, opts ...http.CallOption) (rsp *CloseSymbolReply, err error)
}

type EngineHTTPClientImpl struct {
	cc *http.Client
}

func NewEngineHTTPClient(client *http.Client) EngineHTTPClient {
	return &EngineHTTPClientImpl{client}
}

func (c *EngineHTTPClientImpl) AddSymbol(ctx context.Context, in *AddSymbolReq, opts ...http.CallOption) (*AddSymbolReply, error) {
	var out AddSymbolReply
	pattern := "/symbol/v1/open"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEngineAddSymbol))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EngineHTTPClientImpl) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...http.CallOption) (*CancelOrderReply, error) {
	var out CancelOrderReply
	pattern := "/order/v1/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEngineCancelOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EngineHTTPClientImpl) CreateOrder(ctx context.Context, in *AddOrderReq, opts ...http.CallOption) (*AddOrderReply, error) {
	var out AddOrderReply
	pattern := "/order/v1/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEngineCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EngineHTTPClientImpl) GetEngine(ctx context.Context, in *CloseSymbolReq, opts ...http.CallOption) (*CloseSymbolReply, error) {
	var out CloseSymbolReply
	pattern := "/symbol/v1/close"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEngineGetEngine))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
