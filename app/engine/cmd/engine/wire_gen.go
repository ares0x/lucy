// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"lucy/app/engine/internal/biz"
	"lucy/app/engine/internal/conf"
	"lucy/app/engine/internal/data"
	"lucy/app/engine/internal/server"
	"lucy/app/engine/internal/service"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	redisCli := data.NewRedis(confData,logger)
	dataData, cleanup, err := data.NewData(confData,redisCli, logger)
	if err != nil {
		return nil, nil, err
	}
	symbols := []string{"BTC_USDT", "ETH_USDT", "OP_USDT"}
	engine, err := biz.NewEngine(symbols)
	if err != nil {
		return nil, nil, err
	}
	symbolRepo := data.NewSymbolRepo(dataData,logger)
	priceRepo := data.NewPriceRepo(dataData,logger)
	symbolCase := biz.NewSymbolUseCase(symbolRepo)
	priceCase := biz.NewPriceUseCase(priceRepo)
	engineService := service.NewEngineService(engine,priceCase, symbolCase)
	grpcServer := server.NewGRPCServer(confServer, engineService, logger)
	httpServer := server.NewHTTPServer(confServer, engineService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
